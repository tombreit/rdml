# Generated by Django 5.1.5 on 2025-02-11 16:47

import django.db.models.deletion
import rdml.organization.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('classification', '0001_initial'),
        ('organization', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContributionPosition',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('weight', models.PositiveIntegerField(default=500, help_text='Ordering for displaying the positions. High values -> high order.')),
            ],
            options={
                'ordering': ['-weight'],
            },
        ),
        migrations.CreateModel(
            name='RelatedResource',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('relation_type', models.CharField(choices=[('IsCitedBy', 'IsCitedBy'), ('Cites', 'Cites'), ('IsSupplementTo', 'IsSupplementTo'), ('IsPartOf', 'IsPartOf'), ('HasPart', 'HasPart')], default='IsPartOf', max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContributorPerson',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('contribution_start_date', models.DateField(blank=True, null=True)),
                ('contribution_end_date', models.DateField(blank=True, null=True)),
                ('datacite_contributor_type', models.CharField(choices=[('ContactPerson', 'Contactperson'), ('DataCollector', 'Datacollector'), ('DataCurator', 'Datacurator'), ('DataManager', 'Datamanager'), ('Distributor', 'Distributor'), ('Editor', 'Editor'), ('HostingInstitution', 'Hostinginstitution'), ('Producer', 'Producer'), ('ProjectLeader', 'Projectleader'), ('ProjectManager', 'Projectmanager'), ('ProjectMember', 'Projectmember'), ('RegistrationAgency', 'Registrationagency'), ('RegistrationAuthority', 'Registrationauthority'), ('RelatedPerson', 'Relatedperson'), ('Researcher', 'Researcher'), ('ResearchGroup', 'Researchgroup'), ('RightsHolder', 'Rightsholder'), ('Sponsor', 'Sponsor'), ('Supervisor', 'Supervisor'), ('WorkPackageLeader', 'Workpackageleader'), ('Other', 'Other')], default='ContactPerson', help_text='DataCite Metadata 7.a', max_length=50)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organization.person')),
                ('person_organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='organization.organization')),
            ],
            options={
                'verbose_name': 'Contributor',
                'verbose_name_plural': 'Contributors',
                'ordering': ['person__last_name'],
            },
        ),
        migrations.CreateModel(
            name='CreatorPerson',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('contribution_start_date', models.DateField(blank=True, null=True)),
                ('contribution_end_date', models.DateField(blank=True, null=True)),
                ('datacite_contributor_type', models.CharField(choices=[('ContactPerson', 'Contactperson'), ('DataCollector', 'Datacollector'), ('DataCurator', 'Datacurator'), ('DataManager', 'Datamanager'), ('Distributor', 'Distributor'), ('Editor', 'Editor'), ('HostingInstitution', 'Hostinginstitution'), ('Producer', 'Producer'), ('ProjectLeader', 'Projectleader'), ('ProjectManager', 'Projectmanager'), ('ProjectMember', 'Projectmember'), ('RegistrationAgency', 'Registrationagency'), ('RegistrationAuthority', 'Registrationauthority'), ('RelatedPerson', 'Relatedperson'), ('Researcher', 'Researcher'), ('ResearchGroup', 'Researchgroup'), ('RightsHolder', 'Rightsholder'), ('Sponsor', 'Sponsor'), ('Supervisor', 'Supervisor'), ('WorkPackageLeader', 'Workpackageleader'), ('Other', 'Other')], default='ContactPerson', help_text='DataCite Metadata 7.a', max_length=50)),
                ('contribution_position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='research.contributionposition')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organization.person')),
                ('person_organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='organization.organization')),
            ],
            options={
                'verbose_name': 'Creator',
                'verbose_name_plural': 'Creators',
                'ordering': ['-contribution_position__weight', 'person__last_name'],
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_public', models.BooleanField(default=False, help_text='If false (e.g. within an embargo period), this object will not be published.')),
                ('datacite_resource_type', models.CharField(blank=True, help_text='DataCite Metadata 10. The recommended content is a                    single term of some detail so                    that a pair can be formed with the resourceTypeGeneral                    subproperty. For example, a resourceType of “Census Data”                    paired with a resourceTypeGeneral of “Dataset” yields                    “Dataset/Census Data”.', max_length=50, verbose_name='DataCite ResourceType')),
                ('datacite_resource_type_general', models.CharField(blank=True, choices=[('Audiovisual', 'Audiovisual'), ('Book', 'Book'), ('BookChapter', 'Bookchapter'), ('Collection', 'Collection'), ('ComputationalNotebook', 'Computationalnotebook'), ('ConferencePaper', 'Conferencepaper'), ('ConferenceProceeding', 'Conferenceproceeding'), ('DataPaper', 'Datapaper'), ('Dataset', 'Dataset'), ('Dissertation', 'Dissertation'), ('Event', 'Event'), ('Image', 'Image'), ('InteractiveResource', 'Interactiveresource'), ('Journal', 'Journal'), ('JournalArticle', 'Journalarticle'), ('Model', 'Model'), ('OutputManagementPlan', 'Outputmanagementplan'), ('PeerReview', 'Peerreview'), ('PhysicalObject', 'Physicalobject'), ('Preprint', 'Preprint'), ('Project', 'Project'), ('Report', 'Report'), ('Service', 'Service'), ('Software', 'Software'), ('Sound', 'Sound'), ('Standard', 'Standard'), ('Text', 'Text'), ('Workflow', 'Workflow'), ('Other', 'Other')], default='Other', help_text='DataCite Metadata 10.a. For projects: use “Other” and set “Project” as the resource type.', max_length=50, verbose_name='DataCite ResourceTypeGeneral')),
                ('slug', models.SlugField(default=uuid.uuid4, help_text='Short, `speaking`, unique identfier.', max_length=255, unique=True)),
                ('title_en', models.CharField(max_length=255, verbose_name='Title (EN)')),
                ('title_de', models.CharField(blank=True, max_length=255, verbose_name='Title (DE)')),
                ('abstract_en', models.TextField(blank=True, verbose_name='Abstract (EN)')),
                ('abstract_de', models.TextField(blank=True, verbose_name='Abstract (DE)')),
                ('language', models.CharField(choices=[('de', 'de - German'), ('en', 'en - English')], default='de', help_text='The primary language of the resource', max_length=2)),
                ('website', models.URLField(blank=True, verbose_name='Project website')),
                ('date_start', models.DateField(blank=True, help_text='Date the project has been started. Only the year component will be listed publicly.', null=True)),
                ('date_completed', models.DateField(blank=True, help_text='Date the project has been completed. Only the year component will be listed publicly.', null=True)),
                ('data_protection_concept', models.TextField(blank=True, help_text="Description of the legal basis and measures of data protection (e.g. 'informed consent')", verbose_name='Data Protection Concept')),
                ('sensitive_information', models.TextField(blank=True, help_text='Elements of data which contain sensitive personal data')),
                ('ethical_approval', models.CharField(blank=True, help_text='Approval by ethics board. Name of ethics board/committee. Leave empty if none.', max_length=255)),
                ('preregistration', models.URLField(blank=True, help_text='Information on preregistration if applicapble. Please provide an URL.')),
                ('research_funding_grant_id', models.CharField(blank=True, help_text='Funding grant ID and/or number.', max_length=255)),
                ('time_dimension_specified', models.TextField(blank=True, help_text='Additional or other information on time method/research design')),
                ('population_universe', models.CharField(blank=True, help_text='Description of the population from which the sample is drawn', max_length=255)),
                ('sampling_procedure_specified', models.TextField(blank=True, help_text='Additional, detailed information about sampling procedure')),
                ('mode_of_collection_specified', models.TextField(blank=True, help_text='Additional, detailed information about mode of data collection')),
                ('sample_size', models.PositiveIntegerField(blank=True, help_text='Additional, detailed information about sample size', null=True, verbose_name='Sample size')),
                ('sample_size_specified', models.TextField(blank=True, help_text='Detailed information about the corresponding classification field.')),
                ('data_collection_start_at', models.DateField(blank=True, help_text="'day' currently not evaluated: select first of respective month.", null=True, verbose_name='Start of data collection')),
                ('data_collection_end_at', models.DateField(blank=True, help_text="'day' currently not evaluated: select first of respective month.", null=True, verbose_name='End of data collection')),
                ('geographic_area_specified', models.TextField(blank=True, help_text='Additional or other information on geographic area not covered by ISO')),
                ('archiving_access_embargo_until', models.DateField(blank=True, help_text='Embargoed until (exact date needed)', null=True, verbose_name='Embargo (until)')),
                ('archiving_access_license', models.CharField(blank=True, choices=[('CC_BY', 'CC BY'), ('CC_BY_SA', 'CC BY-SA'), ('CC_BY_NC', 'CC BY-NC'), ('CC_BY_NC_SA', 'CC BY-NC-SA'), ('CC_BY_ND', 'CC BY-ND'), ('CC_BY_NC_ND', 'CC BY-NC-ND'), ('CC_0', 'CC0')], max_length=255, verbose_name='License')),
                ('archiving_access_remarks', models.TextField(blank=True, help_text='Additional information about the project not specified elsewhere', verbose_name='Remarks')),
                ('archiving_access_publications', models.TextField(blank=True, help_text='Publications in relation to this project (free text; sample of key publications only)', verbose_name='Publications')),
                ('study_documentation', models.TextField(blank=True, help_text='List of existing documents relating to: Technical reports, protocols, questionnaires, legal documents (data protection, ethics  approval, funding applicatons, cooperation agreements, ...)', verbose_name='Study documentation')),
                ('archiving_access_availability', models.ForeignKey(blank=True, help_text='Availability class of dataset', null=True, on_delete=django.db.models.deletion.PROTECT, to='classification.cvarchivingaccessavailability', verbose_name='Availability')),
                ('child_resources', models.ManyToManyField(through='research.RelatedResource', to='research.resource')),
                ('contributors', models.ManyToManyField(related_name='contributor_persons', through='research.ContributorPerson', to='organization.person')),
                ('creators', models.ManyToManyField(related_name='creator_persons', through='research.CreatorPerson', to='organization.person')),
                ('curators', models.ManyToManyField(blank=True, help_text='Data curators are the persons who are responsible for maintaining and managing metadata.', to=settings.AUTH_USER_MODEL)),
                ('cv_geographic_areas', models.ManyToManyField(blank=True, help_text='Geographic areas as ISO-3166-1 and ISO-3166-2. To select area type country name (English).', to='classification.cvgeographicarea', verbose_name='Geographic Area (ISO, CV)')),
                ('cv_mode_of_collection', models.ManyToManyField(blank=True, help_text='Controlled vocabulary. Choose from list.', to='classification.cvmodeofcollection', verbose_name='Mode of Collection (CV)')),
                ('cv_sampling_procedure', models.ManyToManyField(blank=True, help_text='Controlled vocabulary. Choose from list.', to='classification.cvsamplingprocedure', verbose_name='Sampling Procedure (CV)')),
                ('cv_subject_areas', models.ManyToManyField(blank=True, help_text='Controlled vocabulary. Choose from list.', to='classification.cvsubjectarea', verbose_name='Area of Research (CV)')),
                ('cv_time_dimension', models.ManyToManyField(blank=True, help_text='Controlled vocabulary. Choose from list.', to='classification.cvtimedimension', verbose_name='Time Dimension (CV)')),
                ('keywords', models.ManyToManyField(blank=True, help_text='You may choose from existing list of keywords or add new keywords', to='classification.cvclassificationkeyword')),
                ('organizational_unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='organization.organizationalunit')),
                ('publisher', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='organization.organization')),
                ('research_funding_agency', models.ManyToManyField(blank=True, to='classification.cvresearchfundingagency')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='relatedresource',
            name='child_resource',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='related_resources', to='research.resource'),
        ),
        migrations.AddField(
            model_name='relatedresource',
            name='parent_resource',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='research.resource'),
        ),
        migrations.CreateModel(
            name='FileInfo',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('filename', models.CharField(help_text='File name. Exactly as stored in archive.', max_length=255)),
                ('filesize', models.FloatField(blank=True, help_text='Filesize in MB (Megabytes)', null=True)),
                ('special_file_format', models.TextField(blank=True, help_text='Only if not standard format (line=case/column=variable), information on data structure (e.g. in longitudinal data: long/wide format; relational (n:m)/multilevel data, etc.)')),
                ('description', models.TextField(blank=True, help_text='Short characterization of data, additional information')),
                ('internal_version_date', models.DateField(blank=True, null=True)),
                ('language', models.CharField(blank=True, choices=[('de', 'de - German'), ('en', 'en - English')], default='en', help_text='Text language (content or labels, e.g. English)', max_length=2)),
                ('number_of_variables', models.PositiveIntegerField(blank=True, null=True)),
                ('number_of_cases', models.PositiveIntegerField(blank=True, null=True)),
                ('weighting_concept', models.TextField(blank=True, help_text='Brief description of weighting concept')),
                ('weighting_variable', models.CharField(blank=True, help_text='Name of weigthting variable', max_length=255)),
                ('id_variable', models.CharField(blank=True, help_text='Name of variable which contains unique (personal) identifier to potentially link data to external information.', max_length=255)),
                ('sensitive_variables', models.TextField(blank=True, help_text='Variables presenting data protecting risks (i.e. for potential re-identification), with explanations.')),
                ('anonymization_procedures', models.TextField(blank=True, help_text='Pseudo-/Anonymisierungsverfahren. Description of strategies to remove or defuse sensitive personal information.')),
                ('filetype', models.ForeignKey(blank=True, help_text='E.g. DTA (Stata data file), CSV, MP3, etc.', null=True, on_delete=django.db.models.deletion.PROTECT, to='classification.filetype')),
                ('resource', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='research.resource')),
            ],
            options={
                'verbose_name': 'File information',
                'verbose_name_plural': 'Files information',
            },
        ),
        migrations.AddField(
            model_name='creatorperson',
            name='resource',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='research.resource'),
        ),
        migrations.AddField(
            model_name='contributorperson',
            name='resource',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='research.resource'),
        ),
        migrations.CreateModel(
            name='ResearchResource',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('research.resource',),
        ),
    ]
